// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef __scvxclustr_RcppExports_h__
#define __scvxclustr_RcppExports_h__

#include <RcppEigen.h>
#include <Rcpp.h>

namespace scvxclustr {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("scvxclustr", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("scvxclustr", "scvxclustr_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in scvxclustr");
            }
        }
    }

    inline List admm_eigen(Eigen::Map<Eigen::MatrixXd> X, Eigen::Map<Eigen::VectorXd> w, double gamma1, double gamma2, Eigen::Map<Eigen::VectorXd> gamma2_weight, double nu, double tol_abs, double max_iter, double type, Function f) {
        typedef SEXP(*Ptr_admm_eigen)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_admm_eigen p_admm_eigen = NULL;
        if (p_admm_eigen == NULL) {
            validateSignature("List(*admm_eigen)(Eigen::Map<Eigen::MatrixXd>,Eigen::Map<Eigen::VectorXd>,double,double,Eigen::Map<Eigen::VectorXd>,double,double,double,double,Function)");
            p_admm_eigen = (Ptr_admm_eigen)R_GetCCallable("scvxclustr", "scvxclustr_admm_eigen");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_admm_eigen(Rcpp::wrap(X), Rcpp::wrap(w), Rcpp::wrap(gamma1), Rcpp::wrap(gamma2), Rcpp::wrap(gamma2_weight), Rcpp::wrap(nu), Rcpp::wrap(tol_abs), Rcpp::wrap(max_iter), Rcpp::wrap(type), Rcpp::wrap(f));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<List >(__result);
    }

    inline List ama_eigen(Eigen::Map<Eigen::MatrixXd> X, Eigen::Map<Eigen::VectorXd> w, Eigen::Map<Eigen::MatrixXd> ix, double gamma1, double gamma2, Eigen::Map<Eigen::VectorXd> gamma2_weight, double nu, double tol_abs, double max_iter, double type) {
        typedef SEXP(*Ptr_ama_eigen)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_ama_eigen p_ama_eigen = NULL;
        if (p_ama_eigen == NULL) {
            validateSignature("List(*ama_eigen)(Eigen::Map<Eigen::MatrixXd>,Eigen::Map<Eigen::VectorXd>,Eigen::Map<Eigen::MatrixXd>,double,double,Eigen::Map<Eigen::VectorXd>,double,double,double,double)");
            p_ama_eigen = (Ptr_ama_eigen)R_GetCCallable("scvxclustr", "scvxclustr_ama_eigen");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_ama_eigen(Rcpp::wrap(X), Rcpp::wrap(w), Rcpp::wrap(ix), Rcpp::wrap(gamma1), Rcpp::wrap(gamma2), Rcpp::wrap(gamma2_weight), Rcpp::wrap(nu), Rcpp::wrap(tol_abs), Rcpp::wrap(max_iter), Rcpp::wrap(type));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<List >(__result);
    }

}

#endif // __scvxclustr_RcppExports_h__
